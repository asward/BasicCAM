@using BasicCAM.WASM.Application
@using Microsoft.Extensions.Logging
@using Blazored.Modal.Services
@using Tewr.Blazor.FileReader

 
@inject BasicCAMMain App
@inject HttpClient Http



<nav class="navbar">
    <a class="brand"></a>
    <ul class="menu-items">
        <li class="">
            <button class="menu-btn" @onclick="OnClickedNewProject">
                <i class="fa fa-file"></i>
            </button>
        </li>

        <li class="">
            <button class="menu-btn" @onclick="OnClickedOpen">
                <i class="fa fa-folder-open"></i>
            </button>
        </li>

        <li class="">
            <button class="menu-btn" @onclick="OnClickedSaveProject">
                <i class="fa fa-save"></i>
            </button>
        </li>

        @*<li class="">
            <button class="menu-btn" @onclick="OnClickedAddDXF">
                <i class="fas fa-file-upload"></i>
            </button>
        </li>*@

        @*<li class="">
            <button class="menu-btn" @onclick="OnClickedSolve">
                <i class="fas fa-gears"></i>
            </button>
        </li>*@

        <li class="">
            <button class="menu-btn" @onclick="OnClickedSample">
                <i class="fas fa-database"></i>
            </button>
        </li>
    </ul>
</nav>

@code{

    [CascadingParameter]
    public IModalService Modal { get; set; }

    //[Inject]
    //private IModalService Modal { get; set; }

    [Inject]
    private ILogger<NavMenu> logger { get; set; }


    [Inject]
    private IFileReaderService fileReaderService { get; set; }

    public event EventHandler NewProjectClicked;
    protected virtual async void OnClickedNewProject(MouseEventArgs e)
    {
        EventHandler handler = NewProjectClicked;
        await App.NewProject();
        handler?.Invoke(this, e);
    }


    public event EventHandler OpenClicked;
    protected virtual async void OnClickedOpen(MouseEventArgs e)
    {
        var openFileModal = Modal.Show<OpenModal>("Open");
        var result = await openFileModal.Result;

        if (result.Cancelled)
            return;

        OpenModalResults modalResults = (OpenModalResults) result.Data;

        switch (modalResults.FileExtension.ToLower())
        {
            case ".dxf":
                await App.AddFile(modalResults.ContentBuffer);
                break;
            case ".basiccam":
                await App.LoadProject(modalResults.ContentBuffer);
                break;
            default:
                break;
        }

        EventHandler handler = OpenClicked;
        handler?.Invoke(this, e);
    }

    public event EventHandler SaveProjectClicked;
    protected virtual async void OnClickedSaveProject(MouseEventArgs e)
    {
        EventHandler handler = SaveProjectClicked;
        await App.SaveProject();
        handler?.Invoke(this, e);
    }

    //public event EventHandler SaveAsProjectClicked;
    //protected virtual async void OnClickedSaveAsProject(MouseEventArgs e)
    //{
    //    EventHandler handler = SaveAsProjectClicked;
    //    await App.SaveProjectAs();
    //    handler?.Invoke(this, e);
    //}

    //public event EventHandler AddDXFClicked;
    //protected virtual async void OnClickedAddDXF(MouseEventArgs e)
    //{

    //    var openFileModal = Modal.Show<OpenFile>("Open");
    //    var result = await openFileModal.Result;

    //    if (result.Cancelled)
    //    {
    //        logger.LogInformation("Modal was cancelled.");
    //        return;
    //    }

    //    //ElementReference inputTypeFileElement = (ElementReference)result.Data;

    //    //var files = await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync();
    //    //var firstFile = files.First();

    //    //IFileReference fileRef= (IFileReference) result.Data;

    //    byte[] fileBytes = (byte[])result.Data;

    //    EventHandler handler = AddDXFClicked;
    //    await App.AddFile(fileBytes);
    //    handler?.Invoke(this, e);
    //}

    //public event EventHandler SettingsClicked;
    //protected virtual void OnClickedSettings(MouseEventArgs e)
    //{
    //    EventHandler handler = SettingsClicked;
    //    handler?.Invoke(this, e);
    //}

    public event EventHandler AboutClicked;
    protected virtual void OnClickedAbout(MouseEventArgs e)
    {
        EventHandler handler = AboutClicked;
        handler?.Invoke(this, e);
    }

    public event EventHandler SolveClicked;
    protected virtual void OnClickedSolve(MouseEventArgs e)
    {
        App.Recalculate();

        EventHandler handler = SolveClicked;
        handler?.Invoke(this, e);
    }

    public event EventHandler SampleClicked;
    protected virtual async void OnClickedSample(MouseEventArgs e)
    {
        //App.NewProject();
        //byte[] sampleFile = await Http.GetByteArrayAsync("samples/samplefile_gear_polyline.dxf");
        byte[] sampleFile = await Http.GetByteArrayAsync("samples/samplefile_gear.dxf");
        //byte[] sampleFile = await Http.GetByteArrayAsync("samples/samplefile_gear_outsideerror.dxf");

        await App.AddFile(sampleFile);

        EventHandler handler = SampleClicked;
        handler?.Invoke(this, e);
    }
}
