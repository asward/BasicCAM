@using System.Reflection
@using System.ComponentModel

<div class="property-row">

    @{
        switch (this.Object.GetType().GetProperty(Path).GetValue(this.Object))
        {
            case bool b:
                <InputCheckbox @bind-Value="ValueAsBool" class="property-input" title="@Description" />
                break;
            case string s:
                <InputText @bind-Value="ValueAsString" class="property-input" title="@Description"/>
                break;
            case int i:
                <InputNumber @bind-Value="ValueAsInt" class="property-input" title="@Description"/>
                break;
            case double d:
                <InputNumber @bind-Value="ValueAsDouble" class="property-input" title="@Description"/>
                break;
            default:
                var propInfo = this.Object.GetType().GetProperty(Path);
                var propType = propInfo.PropertyType;
                var isEnumPropType = propInfo.PropertyType.IsEnum;
                if (isEnumPropType)
                {
                    <select value="@propInfo.GetValue(this.Object)" @onchange="EnumChanged" class="property-input" title="@Description">
                        @foreach (var opt in Enum.GetValues(propInfo.PropertyType))
                        {
                            <option value="@opt.ToString()">@opt.ToString()</option>
                        }
                    </select>
                }

                break;
        }
    }
    <label for="@Path" class="property-title">@DisplayName</label>

    <ValidationMessage For="() => Path" />
</div>


@code{
    [Parameter]
    public Object Object { get; set; }

    [Parameter]
    public string Path { get; set; }


    private void EnumChanged(ChangeEventArgs e)
    {
        var propInfo = Object.GetType().GetProperty(Path);
        var stringValue = e.Value.ToString();

        if (Enum.TryParse(propInfo.PropertyType, stringValue, out object result))
        {
            Value = result;
        }
    }

    private object _value;

    private object Value
    {
        get
        {
            return Object.GetType().GetProperty(Path).GetValue(Object);
        }
        set
        {
            _value = value;
            Object.GetType().GetProperty(Path).SetValue(Object, _value);
        }
    }

    private bool ValueAsBool
    {
        get
        {
            return (bool)Value;
        }
        set
        {
            Value = value;
        }
    }

    private string ValueAsString
    {
        get
        {
            return (string)Value;
        }
        set
        {
            Value = value;
        }
    }


    private int ValueAsInt
    {
        get
        {
            return (int)Value;
        }
        set
        {
            Value = value;
        }
    }


    private double ValueAsDouble
    {
        get
        {
            return (double)Value;
        }
        set
        {
            Value = value;
        }
    }

    private string DisplayName
    {
        get
        {
            Type t = Object.GetType();
            var o = Convert.ChangeType(Object, t);
            var dd = Object.GetType().GetProperty(Path).GetCustomAttribute(typeof(DisplayNameAttribute)) as DisplayNameAttribute;
            return dd?.DisplayName ?? Path.Split('.').Last();
        }
    }
    private string Description
    {
        get
        {
            Type t = Object.GetType();
            var o = Convert.ChangeType(Object, t);
            var dd = Object.GetType().GetProperty(Path).GetCustomAttribute(typeof(DescriptionAttribute)) as DescriptionAttribute;
            return dd?.Description ?? "";
        }
    }

}
